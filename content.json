{"posts":[{"title":"Graph-Database-Visualization","text":"作品描述： 知识图谱可视化系统 Vue+Echarts+Element-UI+Springboot + HugeGraph + MongoDB : 作品展示： 视频展示-1： 视频展示-2: 代码地址： https://github.com/Liny777/Visualization-vue-sample","link":"/Liny777/2022/10/08/Graph-Database-Visualization/"},{"title":"New-Energy-Car","text":"作品展示： 作品描述： 科技冬奥重点专项的大数据平台 实时展示车辆的数据信息 Vue+Echarts+socket.io","link":"/Liny777/2022/10/08/New-Energy-Car/"},{"title":"Monitor-SDK","text":"本项目主要是实现一个前端监控系统，使用者将本项目开发的埋点代码放置在需要被监控的前端项目中，用户的行为数据会被记录，使用者可以通过一个中台页面监控项目情况。 一、项目介绍Root：一个轻量、快速的全栈前端监控系统。 Github 地址： 二、项目分工 团队成员 主要贡献 郑琬仪 异常概览、总概览和其他页面和接口、页面异常捕获sdk、项目进度与其他事项 林佑光 用户细查及总概览页面、相关前后端接口、用户行为捕获sdk 田雨沛 用户详情页面、相关前后端接口、Flask后端框架搭建、项目自动化构建部署、辅助组员完成代码 熊恺杰 异常详情页面、相关前后端接口、MongoDB数据库搭建、sdk打包、辅助组员完成代码 熊康伟 性能页面、相关前后端接口、页面性能sdk 龚恒 异常详情页面、相关前后端接口、HTTP请求监控sdk及打包 三、项目实现3.1 技术选型与相关开发文档 可以补充场景分析环节，明确要解决的问题和前提假设，比如按当前选型和架构总体预计需要xxx存储空间，xxx台服务器……。 本项目主要是实现一个前端监控系统，使用者将本项目开发的埋点代码放置在需要被监控的前端项目中，用户的行为数据会被记录，使用者可以通过一个中台页面监控项目情况。 3.1.1 前端技术选型：Vue3 + Vite + TypeScript + Arco Design 3.1.2 后端Flask + MongoDB 3.1.3 监控SDKWebpack 3.1.4 其他 为提升代码的可读性和可维护性，我们在前端监控系统仓库中使用 TS + ESLint 来规范成员的代码风格；为方便统计成员每次提交的内容，使用 commitlint 来规范仓库的提交信息。 网站监控系统项目中，使用 flask+mongodb 搭建数据服务器并模拟数据；在监控SDK项目中，通过设置 webpack 的请求中间件来实现虚拟服务器。 3.2 架构设计 可以补充场景分析环节，明确要解决的问题和前提假设，比如预计0.5%的用户属于大V，粉丝很多，也会经常上传视频，当前架构的解决方案是xxx。 为了使多人协同的项目进行部署时快捷高效，我们加入了自动化部署脚本 为了在有限的时间内快速开发具有良好交互特性和较美观的 UI 的网页，我们选择了字节的Arco Design组件库 为了良好的项目和组件结构，我们根据不同需求建立文件夹（概览、异常、用户、性能）内有index.vue 以及组件文件夹以存储组件，前端架构耦合度较低，便于查找和管理 3.2.1 数据库设计 3.3 项目代码介绍 前端监控系统： 123456789101112131415161718192021222324252627282930313233343536web-monitor-dashboard├─.husky├─config└─src ├─api // api接口 ├─assets // 静态资源 ├─components // 通用组件 ├─config // 项目配置 ├─directive // 自定义指令库 ├─hooks // 前端工具 ├─layout // 基础布局 ├─locale // 中英文编码 ├─mock // 数据mock ├─router // 路由文件 │ ├─appMenus │ ├─guard │ └─routes │ └─modules // 各个页面的router ├─store // 数据存储 ├─types // 数据类型定义 ├─utils // 数据类工具 └─views ├─error // 错误页面 │ ├─issue-details // 错误详情页面 │ └─issues // 错误概览页面 ├─login // 登入页面 ├─not-found // not-found 页面 ├─overview // 概览页面 │ ├─components │ └─locale ├─performance // 性能页面 │ ├─api // api性能及详情页面 │ └─page // 页面性能及详情页面 ├─user // 用户详情页面 ├─useraction // 用户细查页面 └─userinfo 后端： 123456789101112131415161718web-monitor-backend│ requirements.txt└─api │ __init__.py ├─mock │ data_generator.py │ mock_data_forger.py ├─model // 数据表定义 │ models.py ├─route │ api.py // 其他相关接口 │ errors.py // 错误相关后端接口 │ performance.py // 性能相关后端接口 │ user.py // 用户相关后端接口 │ mock_api.py └─util data_process.py utils.py 监控系统SDK： 12345678monitorSDK └─lib blankError.js // 白屏异常 jsError.js // 脚本异常 promiseError.js // Promise 脚本异常 resource.js // 资源加载异常 stayTime.js // 监控用户行为 xhr.js // 监控request 四、测试结果 建议从功能测试和性能测试两部分分析，其中功能测试补充测试用例，性能测试补充性能分析报告、可优化点等内容。 功能测试： 用户登录、路由切换 概览页面：流量数据、用户量统计、访客量趋势、页面浏览量趋势、用户平均停留时长、异常数据总览加载 用户细查页面：用户列表显示、根据用户编号查询功能 用户详情页面：用户相关信息显示 错误概览页面：异常数据图标显示、异常数据列表及根据异常类型即网页查询功能 页面性能页面：FP、FCP、DOM Ready、DNS渲染和页面列表 接口性能页面：平均请求概览、总请求量、接口列表 自适应测试 五、Demo 演示视频 六、项目总结与反思 目前仍存在的问题 数据加载速度较慢 由于对 typescript 使用上的不熟悉，类型声明考虑不周；因人力和时间关系，已完成的通用可配置组件较少 缺少强制代码评审，再加上不同成员对代码熟练程度和风格不一致，导致页面的代码结构差异较大，代码质量可以改善。 已识别出的优化项 针对服务器性能较弱的问题，应该定时整理日志的统计信息，在请求时直接返回，而不是每次都遍历全部日志进行统计。 项目的前端页面结构和功能不够完善，其中包括：缺乏切换监控不同项目、图表中可以选择更多不同的时间维度 数据结构设计存在改进空间，性能页面需要从多个表中获取不同的数据 架构演进的可能性 项目过程中的反思与总结 大部分同学对ts、python、github操作不是很熟悉 直接使用Arco Design Pro的代码为框架，但由于对代码的框架不是很熟悉导致出现问题 后期没有实时跟踪成员的进度，导致不能在成员出现代码困难第一时间发现 总结：经过这次项目，对前端监控的认识加深了很多，同时也进一步需要根据不同组员的能力进行良好和清晰的分工的重要性，尽管我们在很早就开始大项目，但是由于并没有很好组织代码提交进度，也面对了很多问题。无论如何，在大家的共同努力下依然完成了这次的大项目，辛苦大家了！ 没有进行批量上传 传输加密 sourceMap上传 sendBean上传请求 页面关闭的pv uv统计问题 七、其他补充资料（选填）7.1 用户行为PV：用户浏览量 UV：独立访客数 用户停留时长：用户在页面的停留时长 获取方法： 通过监听事件，获取用户跳转页面的行为，然后将跳转页面，用户停留时间等参数发给后端，这个时候已经获取到页面停留时间，同时可以获取pv，因为我们这里简化一下，浏览量只包括浏览页面的话，那每跳转一个页面就是一个浏览量，pv就+1，然后uv就只要对当天的统计的pv采集到的userid进行去重就可以拿到，或者直接到数据库里进行获取就好。 监听页面跳转方法：主要分为两种情况，单页面与多页面应用 单页面SPA：分为Hash模式，History模式 Hash：基于浏览器的hashchange事件，地址变化时，通过window.location.hash 获取地址上的hash值；并通过构造Router类，配置routes对象设置hash值与对应的组件内容。 History：基于HTML5新增的pushState()和replaceState()两个api，以及浏览器的popstate事件，地址变化时，通过window.location.pathname找到对应的组件。并通过构造Router类，配置routes对象设置pathname值与对应的组件内容 多页面MPA： 主要基于**onpageshow(页面显示的时候)和onpagehide(页面隐藏的时候)这两个API获取用户停留的时长。只要在onpageshow初始时间值，在onpagehide**的时间求出差值，然后上传到后台就行。但是目前没有考虑用户直接关闭浏览器的情况。 登录获取用户信息： 在安装SDK时，会先判断**localStorage里是否有用户ID，如果没有，会将请求页面发送给后端，然后后端获取用户的操作系统，设备信息以及IP信息后创建一个新用户并将新用户的ID返回给前端，前端获取到用户ID后将其存放于localStorage中。如果一开始就有用户ID，就直接从localStorage** 中获取。","link":"/Liny777/2022/10/08/Monitor-SDK/"},{"title":"部署Hexo教程","text":"本文主要介绍 Hexo + icarus 基础环境搭建，包含 Hexo 框架的下载安装，icarus 及其组件的下载安装，完成以下操作步骤将初步完成 Hexo 博客 + icarus 主题的配置。后续将对 Hexo 博客进行功能扩展。 即： 已安装 Git 1$ git --version # 查看 git 版本 已安装 Node.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) 12$ node -v # 查看 node.js 版本$ npm -v # 查看 npm 包管理器版本 如未正确安装，请参照 Hexo官方文档 进行安装，以下操作均基于Mac平台。 我的电脑需要如下操作，至今没去查为何每次使用node都需要source一下。 12$ source ~/.bash_profile # 编译一下bash文件 ？？？ $ nvm use 16 # 使用nvm切换node版本 安装Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo 框架。 1$ npm install -g hexo-cli # 全局安装 Hexo 框架 查看 Hexo 版本，检查是否安装成功。 1$ hexo -v Hexo 初始化在任意位置新建一个文件夹，取名 blog，在blog/ 目录下 打开 CMD 窗口，运行以下命令，进行 Hexo 框架初始化。 1$ hexo init # Hexo 初始化 我安装时候，vpn有毒，即使复制终端代理命令也不行，老是断一下连一下 出现问题： 1$ npm not working - &quot;read ECONNRESET&quot; 后面用如下命令解决： use so that npm requests for http url instead of https. and then try the same npm install command 1$ npm config set registry http://registry.npmjs.org/ 我原本的源 12$ npm config get registryhttp://registry.npmjs.org/ 最后换源了 1$ npm config set registry http://registry.npmjs.org/ 下载icarus主题运行下列命令以下载 icarus 主题，此处可能下载较慢，请耐心等待。 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 切换icarus主题打开 _config.yml 文件，将 thems 项的值更改为 icarus 启动Hexo1$ hexo g # 生成静态页面 这里会提示错误 ERROR 我们根据上图中的错误提示安装 icarus 主题所需组件。 1$ npm install --save bulma-stylus@0.8.0 hexo-renderer-inferno@^0.1.3 hexo-component-inferno@^0.10.1 inferno@^7.3.3 inferno-create-element@^7.3.3 再依次运行命令行，重新生成静态页面，并启动 Hexo 服务。 12$ hexo g # 生成静态页面$ hexo s # 启动服务 打开浏览器输入下列网址预览效果。 1http://localhost:4000b 添加 自定义页面 新建一个 分类 页面 1$ hexo new page categories 新建一个 标签 页面 1$ hexo new page tags 新建一个 关于我 页面 1$ hexo new page &quot;about&quot; 写作123$ hexo new [layout] &lt;title&gt; # layout布局默认为post，有三种默认布局即post、page 和 draft，在创建者三种不同类型的文件时，它们将会被保存到不同的路径；# 而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 新建一篇文章示例： 1$ hexo new 第一篇文章的名字 在此之前通常建议开启 _config.yml 中的资源文件夹，以便创建文章的同时，自动为你创建同名资源文件夹，这通常用于存放你在本篇文章所用到的图片等资源。存在此文件夹中的图片，Hexo 生成静态页面时，将会将二者存放在同一文件夹下。 1post_asset_folder: true # 开启文章资源文件夹 部署在正式开始部署上传到 GitHub 上前，通常建议配置 SSH 秘钥，这样不用每次上传部署都要进行登录验证，有关如何配置 SSH 秘钥，请参阅 ————–此处省略10000字————————- ————–挖坑1：GitHub 添加 SSH————— 详情请参阅：Git配置SSH秘钥 ————–挖坑2：GitHub 静态页面————— 首先在_config.yml中修改添加以下内容，指定部署上传的 GitHub 库。 123456789deploy: type: git repo: git@github.com:local-host-8080/local-host-8080.github.io.git branch: master type: git repo: &lt;repository url&gt; branch: [branch] message: [message]Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}) 安装 1git 组件 1$ npm install hexo-deployer-git --save 此外，如果您的 Github Pages 需要使用 CNAME 文件自定义域名，请将 CNAME 文件置于 source/ 目录下，只有这样 hexo deploy 才能将 CNAME 文件一并推送至部署分支。 上传至GitHub 123$ hexo clean$ hexo g$ hexo d 暂时就这样…","link":"/Liny777/2022/10/08/%E9%83%A8%E7%BD%B2Hexo/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/Liny777/2022/10/08/hello-world/"},{"title":"String","text":"","link":"/Liny777/2022/10/08/String/"}],"tags":[{"name":"Echarts","slug":"Echarts","link":"/Liny777/tags/Echarts/"},{"name":"Vue2","slug":"Vue2","link":"/Liny777/tags/Vue2/"},{"name":"TypeScript","slug":"TypeScript","link":"/Liny777/tags/TypeScript/"},{"name":"Vue3","slug":"Vue3","link":"/Liny777/tags/Vue3/"},{"name":"Vite","slug":"Vite","link":"/Liny777/tags/Vite/"},{"name":"Flask","slug":"Flask","link":"/Liny777/tags/Flask/"},{"name":"uWsgi","slug":"uWsgi","link":"/Liny777/tags/uWsgi/"},{"name":"Nginx","slug":"Nginx","link":"/Liny777/tags/Nginx/"},{"name":"MongoDB","slug":"MongoDB","link":"/Liny777/tags/MongoDB/"},{"name":"Hexo","slug":"Hexo","link":"/Liny777/tags/Hexo/"},{"name":"Icarus","slug":"Icarus","link":"/Liny777/tags/Icarus/"},{"name":"Java Basics","slug":"Java-Basics","link":"/Liny777/tags/Java-Basics/"}],"categories":[{"name":"Personal works","slug":"Personal-works","link":"/Liny777/categories/Personal-works/"},{"name":"FrontEnd","slug":"Personal-works/FrontEnd","link":"/Liny777/categories/Personal-works/FrontEnd/"},{"name":"BackEnd","slug":"Personal-works/FrontEnd/BackEnd","link":"/Liny777/categories/Personal-works/FrontEnd/BackEnd/"},{"name":"Deploy","slug":"Deploy","link":"/Liny777/categories/Deploy/"},{"name":"BackEnd","slug":"BackEnd","link":"/Liny777/categories/BackEnd/"}],"pages":[{"title":"categories","text":"","link":"/Liny777/categories/index.html"},{"title":"About","text":"Prototype 关于‘ JS原型 ’ 套娃一开始，先说说为何这个知识点为什么理解起来这么乱个人感觉原因有三： JS内函数即对象。 Function对象和Object对象这两个内置对象的特殊性。（官方的神仙操作） 很多讲解图的指向一眼下去花里胡哨，看着都头疼[手动狗头]。 再说说，为何网上各位前辈的相关文章都难以参透很多前辈在讲解相关知识点的时候都是从__proto__开始讲起，但在我看来，__proto__与prototype关系之密切是无法单独提出来讲的（单独讲就意味着难以理解）；而prototype与constructor又有密切关系，这就造成一种很尴尬的处境，要先讲__proto__就必然需要同时讲解prototype和constructor属性，这个也就是为何对于小白的我们而言这些概念是那么的难以理解。（以上个人看法，仅供参考） 本网站依托于GitHub pages，采用Hexo，主题为Icarus，图床采用SM.MS。Repository","link":"/Liny777/about/index.html"},{"title":"tags","text":"","link":"/Liny777/tags/index.html"}]}